"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { X } from "lucide-react"

interface LoveLetterGameProps {
  onClose: () => void
}

const wordBank = [
  "y√™u",
  "th∆∞∆°ng",
  "em",
  "anh",
  "m√£i m√£i",
  "h·∫°nh ph√∫c",
  "t√¨nh y√™u",
  "tr√°i tim",
  "ng·ªçt ng√†o",
  "ƒë·∫πp",
  "d·ªÖ th∆∞∆°ng",
  "tuy·ªát v·ªùi",
  "ho√†n h·∫£o",
  "b√™n nhau",
  "c√πng nhau",
  "m∆° ∆∞·ªõc",
  "hy v·ªçng",
  "tin t∆∞·ªüng",
  "ch√¢n th√†nh",
  "chƒÉm s√≥c",
]

const templates = [
  { text: "Anh ___ em r·∫•t nhi·ªÅu!", answer: "y√™u" },
  { text: "Em l√† ng∆∞·ªùi ___ nh·∫•t!", answer: "ƒë·∫πp" },
  { text: "Ch√∫ng ta s·∫Ω ___ b√™n nhau!", answer: "m√£i m√£i" },
  { text: "Tr√°i tim anh ch·ªâ ___ em!", answer: "y√™u" },
  { text: "Em l√†m anh c·∫£m th·∫•y ___!", answer: "h·∫°nh ph√∫c" },
]

export default function LoveLetterGame({ onClose }: LoveLetterGameProps) {
  const [currentTemplate, setCurrentTemplate] = useState(0)
  const [selectedWords, setSelectedWords] = useState<string[]>([])
  const [score, setScore] = useState(0)
  const [completedSentences, setCompletedSentences] = useState<string[]>([])
  const [gameComplete, setGameComplete] = useState(false)

  const handleWordClick = (word: string) => {
    const template = templates[currentTemplate]

    if (word === template.answer) {
      // Correct word
      const completedSentence = template.text.replace("___", word)
      setCompletedSentences((prev) => [...prev, completedSentence])
      setScore(score + 50)

      if (currentTemplate < templates.length - 1) {
        setCurrentTemplate(currentTemplate + 1)
      } else {
        setGameComplete(true)
      }
    } else {
      // Wrong word - small penalty
      setScore(Math.max(0, score - 10))
    }
  }

  const resetGame = () => {
    setCurrentTemplate(0)
    setSelectedWords([])
    setScore(0)
    setCompletedSentences([])
    setGameComplete(false)
  }

  return (
    <div className="fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4">
      <div className="relative w-full max-w-2xl mx-auto bg-white rounded-2xl shadow-2xl overflow-hidden">
        {/* Header */}
        <div className="bg-gradient-to-r from-red-500 to-pink-500 p-4 text-white">
          <div className="flex justify-between items-center">
            <div>
              <h3 className="text-xl font-bold">Th∆∞ T√¨nh üíå</h3>
              <p className="text-sm opacity-90">Ch·ªçn t·ª´ ƒë√∫ng ƒë·ªÉ ho√†n th√†nh c√¢u t√¨nh y√™u!</p>
            </div>
            <Button
              variant="outline"
              size="icon"
              className="text-white border-white hover:bg-white/20"
              onClick={onClose}
            >
              <X className="h-6 w-6" />
            </Button>
          </div>
        </div>

        {/* Game Stats */}
        <div className="bg-pink-50 p-4 flex justify-between items-center">
          <div className="text-lg font-bold text-pink-600">ƒêi·ªÉm: {score}</div>
          <div className="text-lg font-bold text-red-600">
            C√¢u: {currentTemplate + 1}/{templates.length}
          </div>
        </div>

        <div className="p-6">
          {!gameComplete ? (
            <>
              {/* Current Template */}
              <div className="mb-6 p-4 bg-gradient-to-r from-pink-100 to-red-100 rounded-xl">
                <h4 className="text-xl font-bold text-gray-800 mb-2">Ho√†n th√†nh c√¢u:</h4>
                <p className="text-lg text-gray-700 font-medium">{templates[currentTemplate].text}</p>
              </div>

              {/* Word Bank */}
              <div className="mb-6">
                <h5 className="text-lg font-bold text-gray-800 mb-3">Ch·ªçn t·ª´ ph√π h·ª£p:</h5>
                <div className="grid grid-cols-3 md:grid-cols-4 gap-2">
                  {wordBank.map((word, index) => (
                    <Button
                      key={index}
                      onClick={() => handleWordClick(word)}
                      variant="outline"
                      className="p-2 text-sm hover:bg-pink-100 hover:border-pink-300"
                    >
                      {word}
                    </Button>
                  ))}
                </div>
              </div>

              {/* Completed Sentences */}
              {completedSentences.length > 0 && (
                <div className="bg-green-50 rounded-xl p-4">
                  <h5 className="text-lg font-bold text-green-700 mb-2">C√¢u ƒë√£ ho√†n th√†nh:</h5>
                  {completedSentences.map((sentence, index) => (
                    <p key={index} className="text-green-600 mb-1">
                      ‚úì {sentence}
                    </p>
                  ))}
                </div>
              )}
            </>
          ) : (
            /* Game Complete */
            <div className="text-center py-8">
              <div className="text-6xl mb-4">üíï</div>
              <h4 className="text-2xl font-bold text-pink-600 mb-4">Th∆∞ t√¨nh ho√†n th√†nh!</h4>
              <div className="bg-pink-50 rounded-xl p-4 mb-6">
                <h5 className="text-lg font-bold text-pink-700 mb-3">B·ª©c th∆∞ c·ªßa b·∫°n:</h5>
                {completedSentences.map((sentence, index) => (
                  <p key={index} className="text-pink-600 mb-2 text-lg">
                    {sentence}
                  </p>
                ))}
              </div>
              <p className="text-lg text-gray-700 mb-6">ƒêi·ªÉm s·ªë: {score}</p>
              <div className="flex gap-4 justify-center">
                <Button
                  onClick={resetGame}
                  className="bg-gradient-to-r from-red-500 to-pink-500 hover:from-red-600 hover:to-pink-600"
                >
                  Vi·∫øt th∆∞ m·ªõi
                </Button>
                <Button onClick={onClose} variant="outline">
                  ƒê√≥ng
                </Button>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}
