"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { X } from "lucide-react"

const questions = [
  {
    question: "ƒêi·ªÅu g√¨ l√†m cho t√¨nh y√™u c·ªßa ch√∫ng ta ƒë·∫∑c bi·ªát?",
    options: ["S·ª± hi·ªÉu bi·∫øt", "Ni·ªÅm tin t∆∞·ªüng", "C·∫£ hai", "T√¨nh c·∫£m ch√¢n th√†nh"],
    correct: 2,
  },
  {
    question: "Khi n√†o ch√∫ng ta c·∫£m th·∫•y h·∫°nh ph√∫c nh·∫•t?",
    options: ["Khi ·ªü b√™n nhau", "Khi chia s·∫ª", "Khi c∆∞·ªùi c√πng nhau", "T·∫•t c·∫£ ƒë·ªÅu ƒë√∫ng"],
    correct: 3,
  },
  {
    question: "T∆∞∆°ng lai c·ªßa ch√∫ng ta s·∫Ω nh∆∞ th·∫ø n√†o?",
    options: ["Tr√†n ƒë·∫ßy y√™u th∆∞∆°ng", "Lu√¥n b√™n nhau", "H·∫°nh ph√∫c m√£i m√£i", "T·∫•t c·∫£ ƒë·ªÅu ƒë√∫ng"],
    correct: 3,
  },
]

interface LoveQuizProps {
  onClose: () => void
}

export default function LoveQuiz({ onClose }: LoveQuizProps) {
  const [currentQuestion, setCurrentQuestion] = useState(0)
  const [score, setScore] = useState(0)
  const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null)
  const [showResult, setShowResult] = useState(false)
  const [answered, setAnswered] = useState(false)

  const handleAnswer = (answerIndex: number) => {
    if (answered) return

    setSelectedAnswer(answerIndex)
    setAnswered(true)

    if (answerIndex === questions[currentQuestion].correct) {
      setScore(score + 1)
    }

    setTimeout(() => {
      if (currentQuestion < questions.length - 1) {
        setCurrentQuestion(currentQuestion + 1)
        setSelectedAnswer(null)
        setAnswered(false)
      } else {
        setShowResult(true)
      }
    }, 1500)
  }

  const resetQuiz = () => {
    setCurrentQuestion(0)
    setScore(0)
    setSelectedAnswer(null)
    setShowResult(false)
    setAnswered(false)
  }

  const getResultMessage = () => {
    if (score === questions.length) {
      return "Ho√†n h·∫£o! T√¨nh y√™u c·ªßa ch√∫ng ta th·∫≠t tuy·ªát v·ªùi! üíï"
    } else if (score >= questions.length / 2) {
      return "Tuy·ªát v·ªùi! Ch√∫ng ta hi·ªÉu nhau r·∫•t t·ªët! ‚ù§Ô∏è"
    } else {
      return "Ch√∫ng ta c·∫ßn t√¨m hi·ªÉu nhau nhi·ªÅu h∆°n n·ªØa! üíñ"
    }
  }

  return (
    <div className="fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4">
      <div className="relative w-full max-w-2xl mx-auto bg-white rounded-2xl shadow-2xl overflow-hidden">
        {/* Header */}
        <div className="bg-gradient-to-r from-purple-500 to-indigo-500 p-4 text-white">
          <div className="flex justify-between items-center">
            <div>
              <h3 className="text-xl font-bold">C√¢u H·ªèi T√¨nh Y√™u üíú</h3>
              <p className="text-sm opacity-90">Kh√°m ph√° t√¨nh y√™u c·ªßa ch√∫ng ta!</p>
            </div>
            <Button
              variant="outline"
              size="icon"
              className="text-white border-white hover:bg-white/20"
              onClick={onClose}
            >
              <X className="h-6 w-6" />
            </Button>
          </div>
        </div>

        <div className="p-6">
          {!showResult ? (
            <>
              {/* Progress */}
              <div className="mb-6">
                <div className="flex justify-between text-sm text-gray-600 mb-2">
                  <span>
                    C√¢u h·ªèi {currentQuestion + 1}/{questions.length}
                  </span>
                  <span>ƒêi·ªÉm: {score}</span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div
                    className="bg-gradient-to-r from-purple-500 to-indigo-500 h-2 rounded-full transition-all duration-300"
                    style={{ width: `${((currentQuestion + 1) / questions.length) * 100}%` }}
                  ></div>
                </div>
              </div>

              {/* Question */}
              <div className="mb-6">
                <h4 className="text-xl font-bold text-gray-800 mb-4">{questions[currentQuestion].question}</h4>
                <div className="space-y-3">
                  {questions[currentQuestion].options.map((option, index) => (
                    <Button
                      key={index}
                      onClick={() => handleAnswer(index)}
                      disabled={answered}
                      className={`w-full p-4 text-left justify-start h-auto ${
                        answered
                          ? index === questions[currentQuestion].correct
                            ? "bg-green-500 hover:bg-green-500 text-white"
                            : index === selectedAnswer
                              ? "bg-red-500 hover:bg-red-500 text-white"
                              : "bg-gray-200 hover:bg-gray-200 text-gray-600"
                          : "bg-gray-100 hover:bg-purple-100 text-gray-800"
                      }`}
                    >
                      {option}
                    </Button>
                  ))}
                </div>
              </div>
            </>
          ) : (
            /* Results */
            <div className="text-center py-8">
              <div className="text-6xl mb-4">
                {score === questions.length ? "üèÜ" : score >= questions.length / 2 ? "üíï" : "üíñ"}
              </div>
              <h4 className="text-2xl font-bold text-purple-600 mb-4">K·∫øt qu·∫£</h4>
              <p className="text-lg text-gray-700 mb-2">
                B·∫°n tr·∫£ l·ªùi ƒë√∫ng {score}/{questions.length} c√¢u h·ªèi
              </p>
              <p className="text-lg text-purple-600 font-medium mb-6">{getResultMessage()}</p>
              <Button
                onClick={resetQuiz}
                className="bg-gradient-to-r from-purple-500 to-indigo-500 hover:from-purple-600 hover:to-indigo-600 mr-4"
              >
                Ch∆°i l·∫°i
              </Button>
              <Button onClick={onClose} variant="outline">
                ƒê√≥ng
              </Button>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}
